<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AtacadoApi</name>
    </assembly>
    <members>
        <member name="T:AtacadoApi.Controllers.AquiculturaController">
            <summary>
            Recurso Aquicultura.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.#ctor(Atacado.EF.Database.AtacadoContext)">
            <summary>
            Construtor da classe.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.GetList(System.Int32,System.Int32)">
            <summary>
            Realiza a busca por todos os registros, filtrando por onde iniciar(skip), e a quantidade desejada(take).
            </summary>
            <param name="skip">Onde inicia os resultados.</param>
            <param name="take">Quantos registros serão retornados.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.GetById(System.Int32)">
            <summary>
            Realiza a busca pelo ID do registro desejado.
            </summary>
            <param name="id">Informe o ID desejado.</param>
            <returns>Registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.GetPorAnoIdMun(System.Int32,System.Int32)">
            <summary>
            Realiza uma busca por todos os registros, filtrando pelo ano(ano) e pelo ID do município(idMun).
            </summary>
            <param name="ano">Ano desejado.</param>
            <param name="idMun">ID do município desejado.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.Post(Atacado.Poco.Auxiliar.AquiculturaPoco)">
            <summary>
            Realiza a criação de um novo registro.
            </summary>
            <param name="poco">Dados do novo registro.</param>
            <returns>Novo registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.Put(Atacado.Poco.Auxiliar.AquiculturaPoco)">
            <summary>
            Atualiza os dados de um registro.
            </summary>
            <param name="poco">Registro a ser atualizado.</param>
            <returns>Registro atualizado.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.Delete(Atacado.Poco.Auxiliar.AquiculturaPoco)">
            <summary>
            Exclui determinado registro.
            </summary>
            <param name="poco">Registro a ser excluído.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.AquiculturaController.DeleteById(System.Int32)">
            <summary>
            Exclui determinado registro, filtrado por sua ID. 
            </summary>
            <param name="id">Informar ID do registro.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="T:AtacadoApi.Controllers.EmpresaController">
            <summary>
            Recurso Empresa.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.#ctor(Atacado.EF.Database.AtacadoContext)">
            <summary>
            Construtor da classe.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.GetAll">
            <summary>
            Realiza a busca por todos os registros.
            </summary>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.GetPage(System.Int32,System.Int32)">
            <summary>
            Realiza a busca por todos os registros, filtrando por onde inicia(skip) e a quantidade(take).
            </summary>
            <param name="skip">Onde inicia os resultados da pesquisa.</param>
            <param name="take">Quantos registros serão retornados.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.GetById(System.Int32)">
            <summary>
            Realiza a busca pelo ID do registro desejado.
            </summary>
            <param name="id">Onde se informa o ID do registro.</param>
            <returns>Registro pesquisado.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.Post(Atacado.Poco.RH.EmpresaPoco)">
            <summary>
            Realiza a adição de um novo registro.
            </summary>
            <param name="poco">Dados do novo registro.</param>
            <returns>Novo registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.Put(Atacado.Poco.RH.EmpresaPoco)">
            <summary>
            Realiza a atualização de um registro.
            </summary>
            <param name="poco">Dados atualizados do registro.</param>
            <returns>Registro atualizado</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.Delete(Atacado.Poco.RH.EmpresaPoco)">
            <summary>
            Realiza a exclusão de um registro.
            </summary>
            <param name="poco">Dados do registro a ser excluído.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.EmpresaController.Delete(System.Int32)">
            <summary>
            Realiza a exclusão de um registro pelo seu ID.
            </summary>
            <param name="id">ID do registro.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="T:AtacadoApi.Controllers.FuncionarioController">
            <summary>
            Recurso Funcionário.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.#ctor(Atacado.EF.Database.AtacadoContext)">
            <summary>
            Construtor da classe.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.GetPage(System.Int32,System.Int32)">
            <summary>
            Realiza a busca por todos os registros, filtrando por onde inicia(skip) e a quantidade(take).
            </summary>
            <param name="skip">Onde inicia os resultados da pesquisa.</param>
            <param name="take">Quantos registros serão retornados.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.GetById(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.GetPorMatricula(System.Int64)">
            <summary>
            
            </summary>
            <param name="mat"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.Post(Atacado.Poco.RH.FuncionarioPoco)">
            <summary>
            
            </summary>
            <param name="poco"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.Put(Atacado.Poco.RH.FuncionarioPoco)">
            <summary>
            
            </summary>
            <param name="poco"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.Delete(Atacado.Poco.RH.FuncionarioPoco)">
            <summary>
            
            </summary>
            <param name="poco"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.FuncionarioController.Delete(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AtacadoApi.Controllers.RebanhoController">
            <summary>
            Recurso Rebanho.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.#ctor(Atacado.EF.Database.AtacadoContext)">
            <summary>
            Construtor da classe.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.Get(System.Int32,System.Int32)">
            <summary>
            Realiza a busca por todos os registros, filtrando por onde iniciar(skip) e a quantidade desejada(take).
            </summary>
            <param name="skip">Onde inicia os resultados.</param>
            <param name="take">Quantos registros serão retornados.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.GetPorID(System.Int32)">
            <summary>
            Realiza a busca pelo ID do registro desejado.
            </summary>
            <param name="id">Informar o ID desejado.</param>
            <returns>Registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.GetPorAnoRefIdMun(System.Int32,System.Int32)">
            <summary>
            Realiza uma busca por todos os registros, filtrando pelo ano(anoRef) e pelo ID do município(idMun).
            </summary>
            <param name="anoRef">Informar o ano de referência.</param>
            <param name="idMun">Informar o ID do município.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.Post(Atacado.Poco.Auxiliar.RebanhoPoco)">
            <summary>
            Realiza a criação de um novo registro.
            </summary>
            <param name="poco">Dados do novo registro.</param>
            <returns>Novo registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.Put(Atacado.Poco.Auxiliar.RebanhoPoco)">
            <summary>
            Atualiza os dados de um registro.
            </summary>
            <param name="poco">Registro a ser atualizado.</param>
            <returns>Registro atualizado.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.Delete(Atacado.Poco.Auxiliar.RebanhoPoco)">
            <summary>
            Exclui determinado registro.
            </summary>
            <param name="poco">Registro a ser excluído.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RebanhoController.DeleteById(System.Int32)">
            <summary>
            Exclui determinado registro, filtrado por sua ID. 
            </summary>
            <param name="id">Informar ID do registro.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="T:AtacadoApi.Controllers.RelatorioAquiculturaController">
            <summary>
            Recurso Relatório Aquicultura.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.RelatorioAquiculturaController.#ctor">
            <summary>
            Construtor da base.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.RelatorioAquiculturaController.GetPorIdMunAno(System.Int32,System.Int32)">
            <summary>
            Relatório de busca, filtrando por produção não nula, ID do município(id) e ano(ano)
            </summary>
            <param name="id">ID do município desejado.</param>
            <param name="ano">Ano desejado.</param>
            <returns>Lista de registros.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.RelatorioAquiculturaController.GetPorIdMunIdTipoAno(System.Int32,System.Int32,System.Int32)">
            <summary>
            Relatório de busca, filtrando por ID de município(idMun), ID do tipo de aquicultura(idTipo) e ano(ano).
            </summary>
            <param name="idMun">ID do município desejado.</param>
            <param name="idTipo">ID do tipo de aquicultura desejada.</param>
            <param name="ano">Ano desejado.</param>
            <returns>Lista de registros.</returns>
        </member>
        <member name="T:AtacadoApi.Controllers.ReworkRelatorioController">
            <summary>
            
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.ReworkRelatorioController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.ReworkRelatorioController.GetProdutoByID(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.ReworkRelatorioController.GetSubcategoriaByID(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:AtacadoApi.Controllers.ReworkRelatorioController.GetCategoriaByID(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:AtacadoApi.Controllers.TipoAquiculturaController">
            <summary>
            Recurso TipoTipoAquicultura.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.#ctor(Atacado.EF.Database.AtacadoContext)">
            <summary>
            Construtor da classe.
            </summary>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.GetList(System.Int32,System.Int32)">
            <summary>
            Realiza a busca por todos os registros, filtrando por onde iniciar(skip), e a quantidade desejada(take).
            </summary>
            <param name="skip">Onde inicia os resultados.</param>
            <param name="take">Quantos registros serão retornados.</param>
            <returns>Coleção de dados.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.GetById(System.Int32)">
            <summary>
            Realiza a busca pelo ID do registro desejado.
            </summary>
            <param name="id">Informe o ID desejado.</param>
            <returns>Registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.Post(Atacado.Poco.Auxiliar.TipoAquiculturaPoco)">
            <summary>
            Realiza a criação de um novo registro.
            </summary>
            <param name="poco">Dados do novo registro.</param>
            <returns>Novo registro.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.Put(Atacado.Poco.Auxiliar.TipoAquiculturaPoco)">
            <summary>
            Atualiza os dados de um registro.
            </summary>
            <param name="poco">Registro a ser atualizado.</param>
            <returns>Registro atualizado.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.Delete(Atacado.Poco.Auxiliar.TipoAquiculturaPoco)">
            <summary>
            Exclui determinado registro.
            </summary>
            <param name="poco">Registro a ser excluído.</param>
            <returns>Registro excluído.</returns>
        </member>
        <member name="M:AtacadoApi.Controllers.TipoAquiculturaController.DeleteById(System.Int32)">
            <summary>
            Exclui determinado registro, filtrado por sua ID. 
            </summary>
            <param name="id">Informar ID do registro.</param>
            <returns>Registro excluído.</returns>
        </member>
    </members>
</doc>
